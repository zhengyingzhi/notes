【配置git】
==============================================================================================
git config --list  （查看配置）
git config --global user.name "Alan Choi"
git config --global user.email caikelun@gmail.com
git config --global core.editor emacs
git config --global color.ui true
git config --system ......  （系统配置：/etc/gitconfig）
git config --global ......  （用户配置：~/.gitconfig）
git config ......           （项目配置：.git/config）

【在工作目录中初始化新仓库】
==============================================================================================
git init

【克隆远程仓库】
==============================================================================================
git clone git@github.com:caikelun/libsvx.git
git clone https://caikelun@github.com/caikelun/libsvx.git
git clone git://github.com/caikelun/libsvx.git

【检查当前的文件状态】
==============================================================================================
git status

【开始跟踪新文件 / 将已修改的文件放入暂存区】（add后需要commit提交）
==============================================================================================
git add file1 file2 ...
git add dir1/file1 dir2/file2 ...
git add dir1  （默认递归目录）
git add .     （默认递归目录，当前目录）

【移除文件】（rm后需要commit提交）
==============================================================================================
git rm file1           （从已跟踪文件清单中移除文件，并移除工作目录中的文件）
git rm --cached file1  （从已跟踪文件清单中移除文件，但保留工作目录中的文件）

【移动文件】（mv后需要commit提交）
==============================================================================================
git mv file1 file2  （同时也移动工作目录中的文件）

【查看已暂存和未暂存的更新】
==============================================================================================
git diff           （查看尚未暂存的文件更新了哪些部分）
git diff --cached  （查看已经暂存的文件更新了哪些部分）
git diff HEAD      （查看 "尚未暂存的文件" 和 "已经暂存的文件" 一共更新了哪些部分）
git diff --stat    （只显示差异的摘要，可加在上面任何一个diff命令中）

【取消已经暂存的文件】
==============================================================================================
git reset HEAD file1 file2

【取消对文件的修改】
==============================================================================================
git checkout -- file1 file2

【提交更新】（提交new file，modified，deleted，renamed等）
==============================================================================================
git commit -m "xxxxxx"
git commit -a -m "xxxxxx"           （跳过使用暂存区，直接提交）
git commit --amend -m "xxxxxx_new"  （修改最后一次提交）

【查看提交历史】
==============================================================================================
git log
git log --oneline --graph --decorate=short

【标签】
==============================================================================================
git tag                                （显示所有标签的名称）
git show v0.0.1                        （显示某个标签的详细信息）
git tag -a v0.0.1 -m "version 0.0.1"   （在当前分支上新建标签）
git push origin v0.0.1                 （推送某个标签到远程仓库）
git push origin --tags                 （推送所有本地新增的标签到远程仓库）

【管理分支】
==============================================================================================
git branch                                  （查看所有本地分支）
git branch -r                               （查看所有远程分支）
git branch -a                               （查看所有分支）
git branch develop                          （以当前所在分支为起始点，建立develop分支）
git branch develop origin/develop           （以origin/develop为起始点，建立develop分支）
git branch -t develop origin/develop        （以origin/develop为起始点，建立develop分支，
                                              并使develop分支跟踪origin/develop分支）
git branch -f -t develop origin/develop     （以origin/develop为起始点，重置develop分支，
                                              并使develop分支跟踪origin/develop分支）
git checkout develop                        （切换到develop分支）
git checkout -b develop origin/develop      （以origin/develop为起始点，建立并切换到develop分支）
git checkout -b develop -t origin/develop   （以origin/develop为起始点，建立并切换到develop分支，
                                              并使develop分支跟踪origin/develop分支）
git merge origin/develop                    （将origin/develop分支合并到当前分支中）

【管理远程仓库】
==============================================================================================
git remote                                                （查看远程仓库名称）
git remote -v                                             （查看远程仓库名称和地址）
git remote show origin                                    （查看远程仓库详细信息）
git remote add origin git@github.com:caikelun/libsvx.git  （添加远程仓库）
git remote rm origin                                      （删除远程仓库）
git remote rename old new                                 （重命令远程仓库）

【从远程仓库下载数据到本地】
==============================================================================================
git fetch origin          （从origin远程仓库下载所有本地没有的数据到对应的远程分支）
git fetch origin master   （从origin远程仓库下载master分支到本地的origin/master远程分支）
git pull                  （当前分支跟踪某个远程分支时，从远程仓库下载数据到对应远程分支，
                            并合并到当前分支）

【推送本地数据到远程仓库】
==============================================================================================
git push -u origin master  （将本地master分支推送到远程仓库，并建立origin/master远程分支，
                             master分支跟踪origin/master远程分支，以后进入本地master分支后，
                             只需输入git push即自动推送数据到该远程仓库，输入git pull即自动
                             更新本地的origin/master远程分支，并自动合并到本地的master分支）
git push origin master     （同上。区别：输入git pull只自动更新本地的origin/master远程分支，
                             但不自动合并到本地的master分支）
