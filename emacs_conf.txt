;; -*-emacs-lisp-*-

(require 'package)
(add-to-list 'package-archives '("gnu" . "http://elpa.emacs-china.org/gnu/"))
(add-to-list 'package-archives '("melpa" . "http://elpa.emacs-china.org/melpa/"))
;;(add-to-list 'package-archives '("melpa" . "http://elpa.emacs-china.org/melpa-stable/"))
;;(add-to-list 'package-archives '("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/"))
;;(add-to-list 'package-archives '("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/"))
;;(add-to-list 'package-archives '("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa-stable/"))
;;(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
;;(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
;;(add-to-list 'package-archives '("melpa" . "http://stable.melpa.org/packages/"))

;; install packages
(defun my-package-install()
  (interactive)
  (package-initialize)
  (setq package-list '(ecb xcscope tabbar go-mode scala-mode))
  (dolist (package package-list)
	(package-install package)))

;; unicad
;;--------------------------------------------------------------------------
;(add-to-list 'load-path "~/devel/elisp")
;(when (locate-library "unicad")
;  (require 'unicad))

;; coding system
;;--------------------------------------------------------------------------
(setq-default current-language-environment "UTF-8")
(setq-default locale-coding-system 'utf-8)
(setq-default pathname-coding-system 'utf-8)
(setq-default file-name-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-next-selection-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; misc
;;--------------------------------------------------------------------------
(setq inhibit-startup-message t)        ; no startup page
(setq-default make-backup-files nil)    ; no backup files
(setq default-major-mode 'text-mode)    ; use text mode when emacs startup
(setq-default column-number-mode t)     ; show column number
(setq-default tab-width 4)              ; tab width
(setq default-fill-column 80)           ; maximum line width
(global-font-lock-mode t)               ; syntax highlight
(fset 'yes-or-no-p 'y-or-n-p)           ; use y/n instead of yes/no
(transient-mark-mode t)                 ; highlight marked text
(menu-bar-mode -1)                      ; no menu bar
(show-paren-mode t)                     ; delimiter matching
(setq show-paren-style 'parentheses)    ; parentheses matching
(setq truncate-partial-width-windows t) ; force truncation in all windows
(setq vc-handled-backends nil)          ; disable vc support
(ido-mode t)                            ; ido mode 
(setq gdb-many-windows t)               ; open gdb many windows

;; key
;;--------------------------------------------------------------------------
(global-set-key (kbd "C-c k") 'kill-this-buffer)
(global-set-key (kbd "C-x C-b") 'ibuffer)

;; cc mode
;;--------------------------------------------------------------------------
(when (locate-library "cc-mode")
  (require 'cc-mode)
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'brace-list-open 0)
  (c-set-offset 'inextern-lang 0)
  (add-hook 'c-mode-common-hook
            (lambda ()
              (setq c-basic-offset 4)
              (setq indent-tabs-mode nil)
              (define-key c-mode-base-map (kbd "RET") 'newline-and-indent))))

;; scala mode
;;--------------------------------------------------------------------------
(when (locate-library "scala-mode")
  (require 'scala-mode)
  (add-hook 'scala-mode-hook 
            (lambda ()
              (setq scala-mode-indent:step 4)
              (setq indent-tabs-mode nil)
              (define-key scala-mode-map (kbd "RET") 'newline-and-indent))))

;; load all devel modules
;;--------------------------------------------------------------------------
(defun d()
  (interactive)

  ;; tabbar
  ;;--------------------------------------------------------
  (when (locate-library "tabbar")
    (require 'tabbar)
    (setq mouse-wheel-mode nil)
    (tabbar-mode t)
    (global-set-key [f5] 'tabbar-backward-group)
    (global-set-key [f6] 'tabbar-forward-group)
    (global-set-key [f7] 'tabbar-backward)
    (global-set-key [f8] 'tabbar-forward)
    (setq tabbar-separator (quote (1.0)))
    (custom-set-faces
     '(tabbar-default ((t (:inherit variable-pitch :background "gray75" :foreground "gray50" :height 0.8))))
     '(tabbar-selected ((t (:inherit tabbar-default :background "white" :foreground "red" :box (:line-width 1 :color "white" :style pressed-button)))))
     '(tabbar-unselected ((t (:inherit tabbar-default :background "white" :foreground "black" :box (:line-width 1 :color "white" :style released-button)))))
     '(tabbar-separator ((t (:inherit tabbar-default :underline nil :height 0.1))))))

  ;; xcscope
  ;;--------------------------------------------------------
  (when (locate-library "xcscope")
    (require 'xcscope)
    (setq cscope-do-not-update-database t))

  ;; buildin cedet
  ;;--------------------------------------------------------
  (semantic-mode 1)
  (global-semantic-idle-scheduler-mode 1)
  
  ;; ecb
  ;;--------------------------------------------------------
  (when (locate-library "ecb")
    (require 'ecb)
    (setq ecb-layout-name "left15")
    (setq ecb-source-path (quote ("~")))
    (setq ecb-windows-width 0.25)
    (setq ecb-tip-of-the-day nil)
    (setq ecb-version-check nil)
    (setq ecb-auto-compatibility-check nil)
    (setq ecb-vc-enable-support nil)
    (setq ecb-tree-make-parent-node-sticky nil)
    (ecb-activate)
    (global-set-key [f9] 'ecb-toggle-ecb-windows)
    (global-set-key (kbd "C-c 1") 'ecb-goto-window-directories)
    (global-set-key (kbd "C-c 2") 'ecb-goto-window-methods)
    (global-set-key (kbd "C-c 3") 'ecb-goto-window-edit1)
    (global-set-key (kbd "C-c 4") 'ecb-goto-window-edit2))

  ;; doxygen
  ;;--------------------------------------------------------
  (when (locate-library "doxygen")
    (require 'doxygen)
    (global-set-key (kbd "C-c d c") 'doxygen-insert-comment)
    (global-set-key (kbd "C-c d F") 'doxygen-insert-file-comment)
    (global-set-key (kbd "C-c d f") 'doxygen-insert-function-comment))
)
